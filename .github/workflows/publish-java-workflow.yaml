name: Publish and Tag Java Library

on:
  push:
    branches:
      - main
      - dev

jobs:
  build-publish-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write   # Needed to push tags
      packages: write   # Needed to publish packages

    steps:
      # 1. Checkout repo
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Needed for tags

      # 2. Set up Java
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'
          server-id: github
          settings-path: ${{ github.workspace }}

      # 3. Determine next version
      - name: Determine version
        id: version
        run: |
          BRANCH=${GITHUB_REF##*/}
          echo "Current branch: $BRANCH"
          
          if [[ "$BRANCH" == "dev" ]]; then
              # For dev branch, use timestamp-based versioning to avoid conflicts
              TIMESTAMP=$(date +"%Y%m%d%H%M%S")
              LATEST_MAIN_TAG=$(git tag -l | grep -v SNAPSHOT | sort -V | tail -1)
              
              if [[ -z "$LATEST_MAIN_TAG" ]]; then
                  LATEST_MAIN_TAG="v1.0.0"
              fi
              
              # Extract base version from latest main tag
              VERSION_NUMBER=${LATEST_MAIN_TAG#v}
              NEW_TAG="v${VERSION_NUMBER}-SNAPSHOT-${TIMESTAMP}"
              echo "Creating dev SNAPSHOT tag: $NEW_TAG"
              
          elif [[ "$BRANCH" == "main" ]]; then
              # For main branch, find the latest non-SNAPSHOT tag and increment MINOR
              LATEST_TAG=$(git tag -l | grep -v SNAPSHOT | sort -V | tail -1)
              if [[ -z "$LATEST_TAG" ]]; then
                  LATEST_TAG="v1.0.0"
              fi
              echo "Latest tag: $LATEST_TAG"
              
              # Remove 'v' prefix and parse version
              VERSION=${LATEST_TAG#v}
              MAJOR=${VERSION%%.*}
              MINOR=${VERSION#*.}
              MINOR=${MINOR%.*}
              PATCH=${VERSION##*.}
              
              # Increment MINOR version
              MINOR=$((MINOR + 1))
              PATCH=0
              
              # If MINOR reaches 100, increment MAJOR and reset MINOR
              if [[ $MINOR -ge 100 ]]; then
                  MAJOR=$((MAJOR + 1))
                  MINOR=0
              fi
              
              NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          else
              # For other branches, use timestamp-based versioning
              TIMESTAMP=$(date +"%Y%m%d%H%M%S")
              LATEST_TAG=$(git tag -l | grep -v SNAPSHOT | sort -V | tail -1)
              if [[ -z "$LATEST_TAG" ]]; then
                  LATEST_TAG="v1.0.0"
              fi
              VERSION_NUMBER=${LATEST_TAG#v}
              NEW_TAG="v${VERSION_NUMBER}-${BRANCH}-${TIMESTAMP}"
          fi

          echo "Next version: $NEW_TAG"
          echo "tag=$NEW_TAG" >> $GITHUB_ENV

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      # 4. Set project version
      - name: Set project version
        run: |
          echo "Setting project version to ${{ env.tag }}"
          # Remove 'v' prefix for Maven/Gradle version
          VERSION_WITHOUT_V=${GITHUB_ENV#v}
          VERSION_WITHOUT_V=${{ env.tag }}
          VERSION_WITHOUT_V=${VERSION_WITHOUT_V#v}
          
          # Update build.gradle with the new version
          sed -i "s/version = '{{VERSION}}'/version = '$VERSION_WITHOUT_V'/g" build.gradle
          
          # Also update any hardcoded version in build.gradle
          sed -i "s/version = '1.0.0'/version = '$VERSION_WITHOUT_V'/g" build.gradle
          
          echo "Updated build.gradle version to: $VERSION_WITHOUT_V"
          # Verify the change
          grep "version = " build.gradle

      # 5. Build and publish
      - name: Build and publish
        run: |
          echo "Building and publishing version: $VERSION_WITHOUT_V"
          # Build the project first
          ./gradlew clean build -stacktrace
          
          # Publish with retry mechanism for package conflicts
          MAX_RETRIES=3
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Publishing attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES"
            if ./gradlew publish -stacktrace; then
              echo "Publishing successful!"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "Publishing failed, retrying in 5 seconds..."
                sleep 5
              else
                echo "Publishing failed after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 6. Tag and push
      - name: Create and push Git tag
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check if tag already exists
          if git rev-parse "${{ env.tag }}" >/dev/null 2>&1; then
            echo "Tag ${{ env.tag }} already exists. Force updating..."
            git tag -f ${{ env.tag }}
            git push origin ${{ env.tag }} --force
          else
            echo "Creating new tag ${{ env.tag }}"
            git tag ${{ env.tag }}
            git push origin ${{ env.tag }}
          fi
